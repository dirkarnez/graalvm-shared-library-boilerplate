name: release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*' # Push events to matching v*, i.e. v1.0, v20.15.10



jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
        include:
          - os: ubuntu-latest
            asset_name: linux-amd64
            gu_binary: gu
          - os: macos-latest
            asset_name: darwin-amd64
            gu_binary: gu
          - os: windows-2022
            asset_name: windows-amd64
            gu_binary: gu.cmd
    steps:
      - uses: actions/checkout@v2

      - if: ${{ matrix.os == 'windows-2022' }}
        name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17.0.7'
          distribution: 'graalvm' # See 'Options' for all available distributions
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Cache local Maven repository
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.m2/repository
      #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-maven-

      # - if: ${{ matrix.os == 'windows-2022' }}
      #   name: Build native executable
      #   run: |
      #     call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
      #     mvnw.cmd -V install -s maven-settings.xml -Pdistribution -Pnative -Pwindows -am -pl quarkus/cli -Dquarkus.native.native-image-xmx=5G
      #   shell: cmd

      - if: ${{ matrix.os != 'windows-2022' }}
        name: Build native executable
        run: |
          native-image --version && \
          javac LibEnvMap.java && \
          native-image -H:Name=libenvmap --shared

      - if: ${{ matrix.os == 'windows-2022' }}
        name: Build native executable
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          native-image.cmd --version &&^
          javac LibEnvMap.java &&^
          native-image.cmd -H:Name=libenvmap --shared
          
# jobs:
#   build:
#     strategy:
#       matrix:
#         os: [ windows-latest ]
#     runs-on: ${{ matrix.os }}
#     env:
#       targetZip: ${{ github.event.repository.name }}-${{ github.ref_name }}-graalvm-jdk-17.0.8+9.1.zip
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Add msbuild to PATH
#         uses: microsoft/setup-msbuild@v1.1
#         with:
#           msbuild-architecture: x64
#           vs-version: latest
          
#       - uses: ilammy/msvc-dev-cmd@v1
#         with:
#           arch: x64
          
#       - name: curl x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
#         shell: cmd
#         run: |
#           curl https://download.oracle.com/graalvm/17/latest/graalvm-jdk-17_windows-x64_bin.zip -L -O &&^
#           7z.exe x graalvm-jdk-17_windows-x64_bin.zip -o"graalvm-jdk-17_windows-x64_bin"
          
#       - name: set PATH, check mingw version, cmake generate, build and install
#         shell: cmd
#         run: |
#           set JAVA_HOME=${{ github.workspace }}\graalvm-jdk-17_windows-x64_bin\graalvm-jdk-17.0.8+9.1
#           set PATH=%JAVA_HOME%\bin
#           echo %PATH% &&^
#           echo %JAVA_HOME% &&^
#           call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" &&^
#           native-image.cmd --version &&^
#           javac LibEnvMap.java &&^
#           native-image.cmd -H:Name=libenvmap --shared &&^
#           dir /s


        # graal_isolate.h
        # graal_isolate_dynamic.h
        # libenvmap.build_artifacts.txt
        # libenvmap.dll
        # libenvmap.so
        # libenvmap.h
        # libenvmap.lib
        # libenvmap_dynamic.h
        
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          path: |
            *.h
            *.build_artifacts.txt
            *.dll
            *.so
            *.lib
          filename: "${{ github.event.repository.name }}-${{ github.ref_name }}-graalvm-jdk-17.0.7-${{ matrix.os }}.zip"

      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.event.repository.name }}-${{ github.ref_name }}-graalvm-jdk-17.0.7-${{ matrix.os }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
